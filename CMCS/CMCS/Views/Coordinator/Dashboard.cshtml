@model List<CMCS.Models.Claim>
@{
    ViewData["Title"] = "Coordinator Dashboard";
    var lecturerName = ViewBag.LecturerName ?? "";
    var selectedStatus = ViewBag.SelectedStatus as ClaimStatus?;
    var statuses = ViewBag.Statuses as IEnumerable<ClaimStatus> ?? new List<ClaimStatus>();
}

<div class="row">
    <div class="col-md-12">
        <h1>Coordinator Dashboard</h1>
        <p class="text-muted">Review and approve pending claims</p>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Stats Cards -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="stat-card stat-card-pending">
            <div class="display-6">@Model.Count(c => c.Status == ClaimStatus.Pending)</div>
            <p>Pending Review</p>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card stat-card-waiting-manager">
            <div class="display-6">@Model.Count(c => c.Status == ClaimStatus.CoordinatorApproved)</div>
            <p>Sent to Manager</p>
        </div>
    </div>
    <div class="col-md-3">
        <div class="stat-card stat-card-total">
            <div class="display-6">@Model.Count</div>
            <p>Total Claims</p>
        </div>
    </div>
</div>

<form method="get" class="row g-2 mb-4">
    <div class="col-md-4">
        <input class="form-control" name="lecturerName" value="@lecturerName" placeholder="Filter by lecturer name..." />
    </div>
    <div class="col-md-3">
        <select class="form-control" name="status" onchange="this.form.submit()">
            <option value="">-- All Statuses --</option>
            @foreach (var status in statuses)
            {
                <option value="@status" selected="@(selectedStatus?.Equals(status) == true ? "selected" : null)">@status</option>
            }
        </select>
    </div>
    <div class="col-md-5">
        <button class="btn btn-primary" type="submit">Apply Filter</button>
        <a class="btn btn-outline-secondary" href="/Coordinator/Dashboard?status=@ClaimStatus.Pending">Show Only Pending</a>
        <a class="btn btn-outline-secondary" href="/Coordinator/Dashboard">Show All</a>
    </div>
</form>

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">
            @if (selectedStatus.HasValue)
            {
                @:@selectedStatus.Value Claims (@Model.Count)
            }
            else
            {
                @:Pending & Coordinator Approved Claims (@Model.Count)
            }
        </h5>
    </div>
    <div class="card-body">
        @if (!Model.Any())
        {
            <div class="alert alert-info">No claims found.</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Claim ID</th>
                            <th>Lecturer</th>
                            <th>Period</th>
                            <th>Workload</th>
                            <th>Amount</th>
                            <th>Status</th>
                            <th>Submitted</th>
                            <th>Documents</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var claim in Model)
                        {
                            <tr>
                                <td>CL-@claim.ClaimId.ToString("D4")</td>
                                <td>@claim.User?.FirstName @claim.User?.LastName</td>
                                <td>@claim.Period</td>
                                <td>@claim.Workload hours</td>
                                <td>@claim.Amount.ToString("C")</td>
                                <td>
                                    <span class="badge @GetStatusBadgeClass(claim.Status)">@GetCoordinatorStatusDisplay(claim.Status)</span>
                                </td>
                                <td>@claim.SubmitDate.ToString("yyyy-MM-dd")</td>
                                <td>
                                    @if (claim.Documents?.Any() == true)
                                    {
                                        <span class="badge bg-info">@claim.Documents.Count</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning text-dark">None</span>
                                    }
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        @if (claim.Status == ClaimStatus.Pending)
                                        {
                                            <form asp-action="Approve" method="post" class="d-inline mb-2">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@claim.ClaimId" />
                                                <button type="submit" class="btn btn-success btn-action">
                                                    <i class="bi bi-check-circle me-1"></i>Approve
                                                </button>
                                            </form>

                                            <form asp-action="Reject" method="post" class="d-inline mb-2">
                                                @Html.AntiForgeryToken()
                                                <input type="hidden" name="id" value="@claim.ClaimId" />
                                                <div class="reject-reason-container">
                                                    <div class="input-group input-group-sm">
                                                        <input type="text" name="rejectionReason"
                                                               class="form-control"
                                                               placeholder="Rejection reason..."
                                                               required
                                                               style="min-width: 150px;" />
                                                        <button type="submit" class="btn btn-danger">
                                                            <i class="bi bi-x-circle me-1"></i>Reject
                                                        </button>
                                                    </div>
                                                </div>
                                            </form>
                                        }
                                        else if (claim.Status == ClaimStatus.CoordinatorApproved)
                                        {
                                            <span class="text-muted small d-block mb-2">Waiting for Manager</span>
                                        }
                                        <a href="@Url.Action("Details", "Claims", new { id = claim.ClaimId })"
                                           class="btn btn-info btn-action">
                                            <i class="bi bi-eye me-1"></i>View Details
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@functions {
    public string GetStatusBadgeClass(ClaimStatus status)
    {
        return status switch
        {
            ClaimStatus.Pending => "badge-pending",
            ClaimStatus.Approved => "badge-approved",
            ClaimStatus.Rejected => "badge-rejected",
            ClaimStatus.CoordinatorApproved => "badge-waiting-manager",
            _ => "bg-secondary"
        };
    }

    public string GetCoordinatorStatusDisplay(ClaimStatus status)
    {
        return status switch
        {
            ClaimStatus.Pending => "Pending",
            ClaimStatus.Approved => "Approved",
            ClaimStatus.Rejected => "Rejected",
            ClaimStatus.CoordinatorApproved => "Pending - Manager",
            _ => status.ToString()
        };
    }
}

<style>
    .action-buttons {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        min-width: 200px;
    }

    .btn-action {
        width: 100%;
        text-align: center;
        padding: 0.5rem 0.75rem;
        font-size: 0.875rem;
    }

    .reject-reason-container {
        width: 100%;
    }

        .reject-reason-container .input-group {
            width: 100%;
        }

        .reject-reason-container .form-control {
            flex: 1;
            min-width: 120px;
        }

    /* Ensure proper spacing in table cells */
    .table td {
        vertical-align: middle;
    }
</style>